apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "io.hasura.sample.todo"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
repositories {
    maven { url uri("/Users/34crossandriod/Documents/Android Repository/sdk/test-android-sdk/core/repo") }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'io.hasura:core:0.1.0'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.google.code.gson:gson:2.6'
//    compile 'com.github.hasura:baas-sdk-java:617ac3b58c'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'
}

buildscript {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.github.hasura.baas-sdk-java:hasura-db-codegen:617ac3b58c'
    }
}

task generate << {

    // Read admin credentials
    Properties props = new Properties()
    props.load(new FileInputStream("hasura.properties"))

    // Build Generation Configuration
    // ------------------------------
    def cfg = new io.hasura.db.util.Configuration();
    cfg.setDir(props.getProperty("dir"))
    cfg.setPackageName(props.getProperty("package"))
    cfg.setDBUrl(props.getProperty("url"))
    cfg.setDBPrefix(props.getProperty("dbprefix"))
    cfg.setAdminAPIKey(props.getProperty("adminAPIKey"))

    // Run the code generator
    // ----------------------
    io.hasura.db.util.GenerationUtil.generate(cfg)
}